;;; sensetion.el --- -*- lexical-binding: t; -*-

(require 'sensetion)
(require 'ert)

(defvar sensetion--sent-with-two-globs
  (sensetion--alist->sent
   '((doc_id . "64345bce-76b0-447a-bfa1-800dc82007a6-7")
     (sent_id . 35)
     (tokens
      ((kind "wf")
       (form . "On")
       (lemmas "on%4" "on%3")
       (tag . "un"))
      ((kind "wf")
       (form . "the")
       (tag . "ignore"))
      ((kind "glob" "b")
       (lemmas "west side%1")
       (tag . "un")
       (glob . "man"))
      ((kind "cf" "b")
       (form . "west")
       (lemmas "west%3" "West%1" "west%1" "west%4")
       (tag . "un"))
      ((kind "cf" "b")
       (form . "side")
       (lemmas "side%2" "side%3" "side%1")
       (tag . "un"))
      ((kind "wf")
       (form . "of")
       (tag . "ignore"))
      ((kind "wf")
       (form . "the")
       (tag . "ignore"))
      ((kind "wf")
       (form . "transect")
       (lemmas "transect%2")
       (tag . "auto")
       (senses "transect%2:35:00::"))
      ((kind "wf")
       (form . ",")
       (tag . "ignore"))
      ((kind "wf")
       (form . "in")
       (lemmas "in%3" "in%1" "In%1" "IN%1" "in%4")
       (tag . "un"))
      ((kind "wf")
       (form . "easternmost")
       (lemmas "easternmost%3")
       (tag . "auto")
       (senses "easternmost%5:00:00:east:00"))
      ((kind "glob" "a")
       (lemmas "New York%1")
       (tag . "un")
       (glob . "man"))
      ((kind "cf" "a")
       (form . "New")
       (lemmas "new%3" "New%3" "new%4")
       (tag . "un"))
      ((kind "cf" "a")
       (form . "York")
       (lemmas "York%1")
       (tag . "auto")
       (senses "york%1:14:00::"))
      ((kind "wf")
       (form . ",")
       (tag . "ignore"))
      ((kind "wf")
       (form . "a")
       (lemmas "A%1" "a%1")
       (tag . "un"))
      ((kind "wf")
       (form . "relatively")
       (lemmas "relatively%4")
       (tag . "auto")
       (senses "relatively%4:02:00::"))
      ((kind "wf")
       (form . "thin")
       (lemmas "thin%4" "thin%2" "thin%3")
       (tag . "un"))
      ((kind "wf")
       (form . "cover")
       (lemmas "cover%2" "cover%1")
       (tag . "un"))
      ((kind "wf")
       (form . "of")
       (tag . "ignore"))
      ((kind "wf")
       (form . "Paleozoic")
       (lemmas "Paleozoic%1" "Paleozoic%3")
       (tag . "un"))
      ((kind "wf")
       (form . "rocks")
       (lemmas "rock%2" "rock%1" "Rock%1")
       (tag . "un"))
      ((kind "wf")
       (form . "overlies")
       (lemmas "overlie%2")
       (tag . "un"))
      ((kind "wf")
       (form . "extended")
       (lemmas "extended%3" "extend%2")
       (tag . "un"))
      ((kind "wf")
       (form . "Precambrian")
       (lemmas "Precambrian%1")
       (tag . "auto")
       (senses "precambrian%1:28:00::"))
      ((kind "wf")
       (form . "Grenville")
       (tag . "ignore"))
      ((kind "wf")
       (form . "crystalline")
       (lemmas "crystalline%3")
       (tag . "un"))
      ((kind "wf")
       (form . "basement")
       (lemmas "basement%1")
       (tag . "un"))
      ((kind "wf")
       (form . ".")
       (tag . "ignore")))
     (text . "On the west side of the transect, in easternmost New York, a relatively thin cover of Paleozoic rocks overlies extended Precambrian Grenville crystalline basement."))))

(defvar sensetion--sent-with-one-glob
  (sensetion--alist->sent '((doc_id . "64345bce-76b0-447a-bfa1-800dc82007a6-3")
		   (sent_id . 26)
		   (tokens
		    ((kind "wf")
		     (form . "The")
		     (tag . "ignore"))
		    ((kind "wf")
		     (form . "nature")
		     (lemmas "nature%1")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "of")
		     (tag . "ignore"))
		    ((kind "wf")
		     (form . "pre-Mississippian")
		     (tag . "ignore"))
		    ((kind "wf")
		     (form . "rocks")
		     (lemmas "rock%2" "rock%1" "Rock%1")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "under")
		     (lemmas "under%3" "under%4")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "the")
		     (tag . "ignore"))
		    ((kind "glob" "a")
		     (lemmas "coastal plain%1")
		     (tag . "un")
		     (glob . "man"))
		    ((kind "cf" "a")
		     (form . "coastal")
		     (lemmas "coastal%3")
		     (tag . "un"))
		    ((kind "cf" "a")
		     (form . "plain")
		     (lemmas "plain%3" "plain%4" "plain%2" "plain%1")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "along")
		     (lemmas "along%4")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "the")
		     (tag . "ignore"))
		    ((kind "wf")
		     (form . "transect")
		     (lemmas "transect%2")
		     (tag . "auto")
		     (senses "transect%2:35:00::"))
		    ((kind "wf")
		     (form . "is")
		     (lemmas "be%2")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "largely")
		     (lemmas "largely%4")
		     (tag . "un"))
		    ((kind "wf")
		     (form . "conjectural")
		     (lemmas "conjectural%3")
		     (tag . "auto")
		     (senses "conjectural%5:00:00:theoretical:00"))
		    ((kind "wf")
		     (form . ".")
		     (tag . "ignore")))
		   (text . "The nature of pre-Mississippian rocks under the coastal plain along the transect is largely conjectural."))))

(ert-deftest sensetion--test-glob ()
  "Test a globbing"
  (let ((globbed (sensetion--glob "precambrian rocks" "n" '(24 25) sensetion--sent-with-two-globs)))
    (print (sensetion--sent->alist globbed))
    (should (= 3 (length (seq-filter (lambda (tk) (equal "c" (cl-second (sensetion--tk-kind tk)))) (sensetion--sent-tokens globbed)))))
    (should (= (1+ (length (sensetion--sent-tokens sensetion--sent-with-two-globs)))
    	       (length (sensetion--sent-tokens globbed))))))

(ert-deftest sensetion--test-unglob ()
  "Test the unglobbing of a glob in a sentence."
  (let ((sensetion--local-status (cons 1 3)))
    (let* ((unglobbed (sensetion--unglob "a" sensetion--sent-with-one-glob))
	   (unglobbed-tokens (sensetion--sent-tokens unglobbed)))
      (should (eq (length (sensetion--sent-tokens sensetion--sent-with-one-glob))
		  (1+ (length unglobbed-tokens))))
      (should (not (seq-some (lambda (tk) (equal (cl-first (sensetion--tk-kind tk)) "glob"))
			     unglobbed-tokens)))
      (should (not (seq-some (lambda (tk) (equal (cl-first (sensetion--tk-kind tk)) "cf"))
			     unglobbed-tokens))))
    (let* ((unglobbed-key "a")
	   (unglobbed (sensetion--unglob unglobbed-key sensetion--sent-with-two-globs))
	   (unglobbed-tokens (sensetion--sent-tokens unglobbed))
	   (globbed-tokens (sensetion--sent-tokens sensetion--sent-with-two-globs)))
      (should (eq (length globbed-tokens)
		  (1+ (length unglobbed-tokens))))
      (should (seq-every-p (lambda (tk) (not (equal unglobbed-key (sensetion--tk-glob? tk))))
			   unglobbed-tokens))
      (should (seq-every-p (lambda (tk) (not (member unglobbed-key (sensetion--tk-coll-keys tk))))
			   unglobbed-tokens)))))

(ert-deftest sensetion--test-alist<->sent ()
  "Test the conversion between alists and sentences"
  (should (equal (sensetion--alist->sent (sensetion--sent->alist sensetion--sent-with-one-glob))
		 sensetion--sent-with-one-glob)))

(ert-deftest sensetion--test-has-lemma? ()
  "Test `sensetion--tk-has-lemma'."
  (let ((tk (elt (sensetion--sent-tokens sensetion--sent-with-two-globs) 3)))
    (should (sensetion--tk-has-lemma? tk "West"))
    (should (sensetion--tk-has-lemma? tk "west"))
    (should (not (sensetion--tk-has-lemma? tk "east")))
    (should (sensetion--tk-has-lemma? (sensetion--make-tk :lemmas (list "be" "was")) "be"))))
